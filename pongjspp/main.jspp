import System;
import Externals.DOM;
external console, process;

Dictionary<string> params = {};

final bool node = typeof window === "undefined";

if(!node) {
	window.location.search.slice(1).split("&").forEach(void (string item) {
		params[(string)(item.split("=")[0] ?? "n")] = item.split("=")[1] ?? "";
	});
}

final int TICKS_PER_SECOND = +(string)(params["ticks"] ?? "60");
final int SPEED = +(string)(params["speed"] ?? "90");
final int TIME = +(string)(params["time"] ?? "1");

final bool AI = !params.contains("noai");
final bool SCORE = !params.contains("noscore");
final bool RAINBOW = params.contains("r");
final bool CANVAS = params.contains("c");

final int SCREENMULTIPLIER = CANVAS ? +(string)(params["width"] ?? "10") : 1;

final double MAXBOUNCEANGLE = 3*Math.PI/12;

bool towards = false;

int score1 = 0;
int score2 = 0;

class Vec2 {
	public double x;
	public double y;

	public Vec2(double x, double y) {
		this.x = x;
		this.y = y;
	}
}

class PhysicsObject {
	public Vec2 pos = new Vec2(0,0);

	public Vec2 dim = new Vec2(2.5d,10d);
	public Vec2 halfDim = new Vec2(1.25d,5d);

	public Vec2 vel = new Vec2(0d,0d);
	public Vec2 tickVel = new Vec2(0d,0d);

	public bool bounce = false;

	public PhysicsObject(double x, double y, double w, double h) {
		this.pos.x = x;
		this.pos.y = y;

		this.dim.x = w;
		this.dim.y = h;

		this.halfDim.x = w / 2;
		this.halfDim.y = h / 2;
	}

	public PhysicsObject(double x, double y, double w, double h, bool bounce) {
		this.pos.x = x;
		this.pos.y = y;

		this.dim.x = w;
		this.dim.y = h;

		this.halfDim.x = w / 2;
		this.halfDim.y = h / 2;

		this.bounce = bounce;
	}
	
	public PhysicsObject() {}

	public Vec2 screenSpaceCords() {
		Vec2 outVec2 = new Vec2(0,0);
		outVec2.x = this.pos.x + 50d - this.halfDim.x;
		outVec2.y = this.pos.y + 50d - this.halfDim.y;
		return outVec2;
	}

	public void setVel(Vec2 vel) {
		this.vel = vel;
		this.tickVel.x = vel.x / TICKS_PER_SECOND;
		this.tickVel.y = vel.y / TICKS_PER_SECOND;
	}

	public void setVelX(double vel) {
		this.vel.x = vel;
		this.tickVel.x = vel / TICKS_PER_SECOND;
	}

	public void setVelY(double vel) {
		this.vel.y = vel;
		this.tickVel.y = vel / TICKS_PER_SECOND;
	}
}

class PhysicScene {
	public PhysicsObject[] objects = [];

	public PhysicScene(...PhysicsObject objs) {
		foreach(PhysicsObject head in objs) {
			objects.push(head);
		}
	}

	public void tick() {
		main: for(int index1 in this.objects) {
			PhysicsObject head = this.objects[index1] ?? new PhysicsObject();

			for(int index2 in this.objects) {
				if(index1 != index2) {
					PhysicsObject item = this.objects[index2] ?? new PhysicsObject();
					if(Math.abs((head.pos.x + head.tickVel.x) - (item.pos.x + item.tickVel.x)) < (head.halfDim.x + item.halfDim.x)
					&& Math.abs((head.pos.y + head.tickVel.y) - (item.pos.y + item.tickVel.y)) < (head.halfDim.y + item.halfDim.y)) {
						if(head.bounce) {
							double relativeIntersectY = ((item.pos.y + item.tickVel.y) + (item.halfDim.y)) - (head.pos.y + head.tickVel.y);
							double normalizedRelativeIntersectionY = (relativeIntersectY - (item.halfDim.y))/(item.halfDim.y);
							double bounceAngle = (normalizedRelativeIntersectionY * MAXBOUNCEANGLE);

							towards = !towards;

							head.setVelX((towards ? -1 : 1)*SPEED*Math.cos(bounceAngle));
							head.setVelY(SPEED*-Math.sin(bounceAngle));
						} else {
							continue main;
						}
					}
				}
			}

			head.pos.x = head.pos.x + head.tickVel.x;

			if (head.pos.y - head.halfDim.y + head.tickVel.y > -50
			&& head.pos.y + head.halfDim.y + head.tickVel.y < 50) {
				head.pos.y = head.pos.y + head.tickVel.y;
			}
		}
	}
}

class Player {
	public PhysicsObject physicsObject = new PhysicsObject(0d, 0d, 2.5d, 10d);

	public Player(double x) {
		this.physicsObject.pos.x = x;
	}
}

class Ball {
	public PhysicsObject physicsObject = new PhysicsObject(0d, 0d, 2.5d, 2.5d, true);

	public Ball() {
		towards = (bool) (int) Math.floor(Math.random() * 2);
		this.reset();
	}

	public void reset() {
		physicsObject.setVelX(((towards ? 1 : 0) - 0.5) * SPEED);
		physicsObject.setVelY((Math.floor(Math.random() * 2) - 0.5) * SPEED);

		this.physicsObject.pos.x = 0;
		this.physicsObject.pos.y = 0;
	}

	public void tick() {
		if(this.physicsObject.pos.x + this.physicsObject.halfDim.x + this.physicsObject.tickVel.x > 50
		|| this.physicsObject.pos.x - this.physicsObject.halfDim.x + this.physicsObject.tickVel.x < -50) {
			this.reset();
			if (towards) {
				score2++;
			} else {
				score1++;
			}
			towards = !towards;
		}

		if(this.physicsObject.pos.y + this.physicsObject.halfDim.y + this.physicsObject.tickVel.y > 50
		|| this.physicsObject.pos.y - this.physicsObject.halfDim.y + this.physicsObject.tickVel.y < -50) {
			this.physicsObject.setVelY(this.physicsObject.vel.y * -1);
		}
	}
}

class AsciiCanvas {
	public string canvas = "";

	public AsciiCanvas() {
		this.clear();
	}

	public void clear() {
		this.canvas = ("-".repeat(100) + "\n").repeat(100);
	}

	public void setChar(int index, string character) {
		this.canvas = this.canvas.substring(0, index) + character.toString() + this.canvas.substring(index + 1);
	}

	public void drawChar(int x, int y, string character) {
		this.setChar(99*y+2*y+x, character);
	}

	public void drawRect(int x, int y, int w, int h) {
		for (int ih = 0; ih < h; ++ih) {
			for (int iw = 0; iw < w; ++iw) {
				this.drawChar(x + iw, y + ih, "#");
			}
		}
	}
}

Player player1 = new Player(-40d);
Player player2 = new Player(40d);
Ball ball = new Ball();

PhysicScene physicScene = new PhysicScene(player1.physicsObject, player2.physicsObject, ball.physicsObject);

void keyDown(string key) {
	switch (key.toLowerCase()) {
		case "arrowup":
			player1.physicsObject.setVelY(-SPEED);
			break;
		case "arrowdown":
			player1.physicsObject.setVelY(SPEED);
			break;
		case "w":
			if(!AI) {
				player2.physicsObject.setVelY(-SPEED);
			}
			break;
		case "s":
			if(!AI) {
				player2.physicsObject.setVelY(SPEED);
			}
			break;
	}
}

void keyUp(string key) {
	switch (key.toLowerCase()) {
		case "arrowup":
			if(player1.physicsObject.vel.y < 0) {
				player1.physicsObject.setVelY(0);
			}
			break;
		case "arrowdown":
			if(player1.physicsObject.vel.y > 0) {
				player1.physicsObject.setVelY(0);
			}
			break;
		case "w":
			if(player2.physicsObject.vel.y < 0 && !AI) {
				player2.physicsObject.setVelY(0);
			}
			break;
		case "s":
			if(player2.physicsObject.vel.y > 0 && !AI) {
				player2.physicsObject.setVelY(0);
			}
			break;
	}
}

string frame = "";

var obj0;
var obj1;
var obj2;
var s1;
var s2;
var asciiCanvasDiv;
var mainCanvas;

if(!node) {
	if(!CANVAS) {
		for(int index in physicScene.objects) {
			PhysicsObject obj = physicScene.objects[index] ?? new PhysicsObject();
			frame += "<div class=\"" + (obj.bounce ? "ball" : "player") + "\" id=\"obj" + index.toString() + "\"></div>";
		}
		if(SCORE) {
			frame += "<div class=\"score\" id=\"s1\">" + score1.toString() + "</div>";
			frame += "<div class=\"score\" id=\"s2\">" + score2.toString() + "</div>";
		}
	} else {
		frame = "<canvas id=\"mainCanvas\"></canvas>";
	}

	frame += "<div id=\"asciiCanvas\"></div>";

	document.body.innerHTML = frame;

	obj0 = document.getElementById("obj0");
	obj1 = document.getElementById("obj1");
	obj2 = document.getElementById("obj2");
	s1 = document.getElementById("s1");
	s2 = document.getElementById("s2");

	asciiCanvasDiv = document.getElementById("asciiCanvas");

	mainCanvas = document.getElementById("mainCanvas");
}

if(!CANVAS) {
	if(RAINBOW) {
		obj0.classList.add("rainbow");
		obj1.classList.add("rainbow");
		obj2.classList.add("rainbow");
		s1.classList.add("rainbow");
		s2.classList.add("rainbow");
	}
}

void drawCSS() {
	obj0.style.left = player1.physicsObject.screenSpaceCords().x.toString() + "%";
	obj0.style.top = player1.physicsObject.screenSpaceCords().y.toString() + "%";
	obj0.style.width = player1.physicsObject.dim.x.toString() + "%";
	obj0.style.height = player1.physicsObject.dim.y.toString() + "%";
		
	obj1.style.left = player2.physicsObject.screenSpaceCords().x.toString() + "%";
	obj1.style.top = player2.physicsObject.screenSpaceCords().y.toString() + "%";
	obj1.style.width = player2.physicsObject.dim.x.toString() + "%";
	obj1.style.height = player2.physicsObject.dim.y.toString() + "%";

	obj2.style.left = ball.physicsObject.screenSpaceCords().x.toString() + "%";
	obj2.style.top = ball.physicsObject.screenSpaceCords().y.toString() + "%";
	obj2.style.width = ball.physicsObject.dim.x.toString() + "%";
	obj2.style.height = ball.physicsObject.dim.y.toString() + "%";

	if(SCORE) {
		s1.innerText = score1.toString();
		s2.innerText = score2.toString();
	}
}

void drawCanvas() {
	var ctx = mainCanvas.getContext("2d");

	mainCanvas.width = 100 * SCREENMULTIPLIER;
	mainCanvas.height = 100 * SCREENMULTIPLIER;

	ctx.fillStyle = "#FFFFFF";
	ctx.fillRect(0,0,100 * SCREENMULTIPLIER,100 * SCREENMULTIPLIER);

	ctx.fillStyle = "#000000";

	ctx.fillRect(player1.physicsObject.screenSpaceCords().x * SCREENMULTIPLIER,
		player1.physicsObject.screenSpaceCords().y * SCREENMULTIPLIER,
		player1.physicsObject.dim.x * SCREENMULTIPLIER,
		player1.physicsObject.dim.y * SCREENMULTIPLIER);
	ctx.fillRect(player2.physicsObject.screenSpaceCords().x * SCREENMULTIPLIER,
		player2.physicsObject.screenSpaceCords().y * SCREENMULTIPLIER,
		player2.physicsObject.dim.x * SCREENMULTIPLIER,
		player2.physicsObject.dim.y * SCREENMULTIPLIER);
	ctx.fillRect(ball.physicsObject.screenSpaceCords().x * SCREENMULTIPLIER,
		ball.physicsObject.screenSpaceCords().y * SCREENMULTIPLIER,
		ball.physicsObject.dim.x * SCREENMULTIPLIER,
		ball.physicsObject.dim.y * SCREENMULTIPLIER);
		
	if(SCORE) {
		ctx.font = '48px serif';
		ctx.fillText(score1.toString(), 20 * SCREENMULTIPLIER, 10 * SCREENMULTIPLIER);
		ctx.fillText(score2.toString(), 80 * SCREENMULTIPLIER, 10 * SCREENMULTIPLIER);
	}
}

AsciiCanvas asciiCanvas = new AsciiCanvas();

void tick() {
	if(AI) {
		if((Math.abs(ball.physicsObject.pos.y - player2.physicsObject.pos.y) >  player2.physicsObject.halfDim.y)) {
			if(ball.physicsObject.pos.y > player2.physicsObject.pos.y) {
				player2.physicsObject.setVelY(SPEED);
			} else if (ball.physicsObject.pos.y < player2.physicsObject.pos.y) {
				player2.physicsObject.setVelY(-SPEED);
			}
		} else {
			player2.physicsObject.setVelY(0);
		}
	}

	physicScene.tick();
	ball.tick();

	if(!node) {
		if(!CANVAS) {
			drawCSS();
		} else {
			drawCanvas();
		}
	} else {
		console.clear();
		asciiCanvas.clear();
		asciiCanvas.drawRect((int)player1.physicsObject.screenSpaceCords().x,
			(int)player1.physicsObject.screenSpaceCords().y,
			(int)player1.physicsObject.dim.x,
			(int)player1.physicsObject.dim.y);
		asciiCanvas.drawRect((int)player2.physicsObject.screenSpaceCords().x,
			(int)player2.physicsObject.screenSpaceCords().y,
			(int)player2.physicsObject.dim.x,
			(int)player2.physicsObject.dim.y);
		asciiCanvas.drawRect((int)ball.physicsObject.screenSpaceCords().x,
			(int)ball.physicsObject.screenSpaceCords().y,
			(int)ball.physicsObject.dim.x,
			(int)ball.physicsObject.dim.y);
		asciiCanvas.drawChar(20, 10, score1.toString().slice(0,1));
		asciiCanvas.drawChar(80, 10, score2.toString().slice(0,1));
		console.log(asciiCanvas.canvas);

		player1.physicsObject.setVelY(0);
	}
}

if(!node) {
	document.body.addEventListener("keydown", function(external event){keyDown(event.key);});
	document.body.addEventListener("keyup", function(external event){keyUp(event.key);});
} else {
	var stdin = process.stdin;
	stdin.setRawMode( true );
	stdin.resume();
	stdin.setEncoding('utf8');
	stdin.on( 'data', function( string key ){
		switch (key) {
			case "\u001b[A":
				keyDown("arrowup");
				break;
			case "\u001b[B":
				keyDown("arrowdown");
				break;
			default:
				keyDown(key);
				break;
		}
	});
}

setInterval(tick, 1000 * TIME / TICKS_PER_SECOND);